openapi: 3.0.3
info:
    title: Tomlyn API Reference
    version: 1.0.0
    contact:
        name: The Tomlyn Team
        url: https://tomlyn.protasis.moe
        email: tomlyn-support@protasis.moe

paths:
    /auth/login:
        post:
            tags: ["Tomlyn API"]
            summary: Acquire an API token for your account.
            description: "Acquire a JWT token for your account. This token is required for all other API requests. Pass in this token in the `Authorization` header. *Note - unless otherwise specified, API tokens expire after 7 days since its time of issue. When the `/auth/logout` method is successfully called, or another successful login attempt to this account is made, this token expires immediately.*"
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                    description: Your Tomlyn account username.
                                    example: "KuromeSama6"
                                password:
                                    type: string
                                    description: Your Tomlyn account password.
                                    example: "password123"
            responses:
                "200":
                    description: "`0` The login was successful."
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 0
                                    message:
                                        type: string
                                        example: "ok"
                                    data:
                                        type: object
                                        properties:
                                            token:
                                                type: string
                                                description: JWT token for your account. Pass this token in the `Authorization` header for all other API requests.
                                                example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0IiwiaWF0IjoxNzI2ODg4OTQyLCJpc3MiOiJ0b21seW5kIiwianRpIjoiaEdUUnVYdklYUVdIWno2MjVDd2M4UjBZZllTaTZrRldlUVRJVzY4OWltWWRRR0k0VVNXZUIyOTRMMElnMnJzSCIsInR5cGUiOiJBUEkifQ.qDxEAeQj6YqE5PlCsoGEJczfVN6xIXgnt4Rkwj50Tag"
                "401":
                    description: "`16` The login was unsuccessful. The username or password was incorrect."
                    content:
                        application/json:
                            example:
                                status: 16
                                message: "invalid credentials"
                                data: {}
    /api/publish/create:
        post:
            tags:
                - Tomlyn API
            summary: Creates a new Package ID.
            description: Requests for a new globally unique Package ID. The first step of the publishing workflow.
            security:
                - TomlynAccountJWT: []
            requestBody:
                content:
                    application/json:
                        schema:
                            allOf:
                                - $ref: "#/components/schemas/PackageManifestHeader"
                                - $ref: "#/components/schemas/PackageManifestMetadata"
                                - $ref: "#/components/schemas/PackageManifestSheets"
            responses:
                "200":
                    description: "`0` A new Package ID has been successfully created."
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 0
                                    message:
                                        type: string
                                        example: "ok"
                                    data:
                                        properties:
                                            repoToken:
                                                type: string
                                                description: |
                                                    The **Repository Token** associated with this account and this package. 

                                                    Repository tokens are JWT tokens that proofs the current account's ownership of this package. This token is not to be confused with your accoun't API authentication token. **This token represent credentials - do not share this token with anyone.** This token can be acquired again at any time by calling an API.
                                            manifest:
                                                $ref: "#/components/schemas/PackageManifest"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "429":
                    description: "`17` the UUID specified in the package descriptor is already in use."
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/responses/StandardResponse"
                            example:
                                status: 17
                                message: "duplicate package uuid"
                                data: {}

    /api/package/{package_id}:
        get:
            tags:
                - Tomlyn API
            summary: Get package manifest.
            description: |
                Acquirese the manifest of a package. By default, this API will only return publically visible packages that are in the `PUBLISHED` state. Providing an API token allows you to get 1) private packages (they must be published) that you have access to, as well as 2) your own packages that are not published.
            parameters:
                - $ref: "#/components/parameters/PackageIdParam"
            security:
                - {}
                - TomlynAccountJWT: []
            responses:
                "200":
                    description: |
                        `0` The full package metadata was successfully retrieved.

                        `100` A partial package metadata was successfully retrieved. This is a partial response, and the `data` field will contain only the fields that are publically visible. To obtain a full response, provide an API token that has access to that package.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 0
                                    message:
                                        type: string
                                        example: "ok"
                                    data:
                                        $ref: "#/components/schemas/PackageManifest"
                "404":
                    description: "`15` The package specified does not exist."

    /api/package/{package_id}/repoToken:
        get:
            tags:
                - Tomlyn API
            summary: Reacquire repository token.
            description: Get the Repository Token associated to this package and account. You must be the owner of this package to acquire its repository token.
            security:
                - TomlynAccountJWT: []
            parameters:
                - $ref: "#/components/parameters/PackageIdParam"
            responses:
                "200":
                    description: "`0` The repository token was successfully retrieved."
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 0
                                    message:
                                        type: string
                                        example: "ok"
                                    data:
                                        type: object
                                        properties:
                                            repoToken:
                                                type: string
                                                description: |
                                                    The **Repository Token** associated with this account and this package. 

                                                    Repository tokens are JWT tokens that proofs the current account's ownership of this package. This token is not to be confused with your accoun't API authentication token. **This token represent credentials - do not share this token with anyone.** This token can be acquired again at any time by calling an API.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    description: "`15` The request was authenticated successfully, but the package specified does not exist."

    /api/auth/verifyRepoToken:
        post:
            tags:
                - Tomlyn API
            summary: Verify a repository token.
            description: Called by repositories to verify a repository token. This token is used to prove the ownership of a package.
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                repoToken:
                                    type: string
                                    description: The repository token to verify.
                                    example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0IiwiaWF0IjoxNzI2ODg4OTQyLCJpc3MiOiJ0b21seW5kIiwianRpIjoiaEdUUnVYdklYUVdIWno2MjVDd2M4UjBZZllTaTZrRldlUVRJVzY4OWltWWRRR0k0VVNXZUIyOTRMMElnMnJzSCIsInR5cGUiOiJBUEkifQ.qDxEAeQj6YqE5PlCsoGEJczfVN6xIXgnt4Rkwj50Tag"
            responses:
                "200":
                    description: "`0` The repository token is valid."
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 0
                                    message:
                                        type: string
                                        example: "ok"
                                    data:
                                        type: object
                                        properties:
                                            packageId:
                                                type: string
                                                description: The Package ID that this token is associated with.
                                                example: "VEOD7z10sP1usvUZrfAG4s1PDL3dzY3jEnwAX577j5yjwJF3ISNAT782LP0DhkFR"
                "404":
                    description: "`16` The token provided is invalid. The repository should not trust the request that provided this token."

    /repo/info:
        get:
            tags: [Repository Protocol]
            summary: General repository information.
            description: Get general information about your repository. Implementaiton of this endpoint is mandatory - clients displays this information to users and may refuse to download your repository if this information is not correct or missing.
            responses:
                "200":
                    description: The repository information was successfully retrieved. View more on repository information on the Tomlyn docs site.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RepositoryInfo"

    /repo/package/{package_id}/status:
        get:
            tags:
                - Repository Protocol
            summary: Get status of a package.
            description: Acquires the status of a package in your repository.
            parameters:
                - $ref: "#/components/parameters/PackageIdParam"
            security:
                - PackageRepoTokenJWT: []
            responses:
                "200":
                    description: This package is stored or will be stored in your repository.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    status:
                                        type: integer
                                        example: 0
                                    message:
                                        type: string
                                        example: "ok"
                                    data:
                                        type: object
                                        properties:
                                            hasFile:
                                                type: boolean
                                                description: Whether your repository is currently in possession
                                                    of the actual .tomz file. When false, indicates that this package
                                                    is permitted to be stored in your repository, but the actual
                                                    file has not been yet received.
                "404":
                    description: This package could not be found in your repository. An empty response body is expected.

    /repo/package/{package_id}/upload:
        post:
            tags: [Repository Protocol]
            summary: Upload a package to your repository.
            description: Upload a package to your repository. This file must be a .tomz file.
            parameters:
                - $ref: "#/components/parameters/PackageIdParam"
            security:
                - PackageRepoTokenJWT: []
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                file:
                                    type: string
                                    format: binary
                                    description: The file to upload.
            responses:
                "200":
                    description: "The package was successfully uploaded."
                "401":
                    description: "*Implemented by Your Repository* The request was not authorized."
                "403":
                    description: "*Implemented by Your Repository* The user does not have permission to upload this package to your repository."
                "404":
                    description: "The package specified does not exist."

components:
    schemas:
        TomlynSnowflakeID:
            type: string
            minLength: 64
            maxLength: 64
            description: A globally unique identifier generated using Tomlyn's algorithm.
            example: "VEOD7z10sP1usvUZrfAG4s1PDL3dzY3jEnwAX577j5yjwJF3ISNAT782LP0DhkFR"

        StandardResponse:
            description: Standard response object for all API endpoints. This is what all responses from the Tomlyn central server will look like.
            type: object
            properties:
                status:
                    type: integer
                    description: |
                        The status code of this response:
                        - `0`: Indicates a successful operation.
                        - `1–9`: Represents internal server errors or invalid client requests (mapped to 5XX HTTP status codes).
                        - `10–99`: Represents client errors (mapped to 4XX HTTP status codes).
                        - `100–999`: Indicates additional warning messages, though the request was still successful. Rarely used.
                        - `1000 and above`: Reserved for informational messages. The request was successful, but additional info is provided. Rarely used.

                        Check the "API Status Codes" page in the Tomlyn docs for more details and specifics.
                message:
                    type: string
                    description: A human-readable message that describes the result of the operation. This will be "ok" on most successful operations.
                data:
                    type: object
                    description: Data returned by this server about this specific request. This field will be an empty object on successful operations and either an empty object or not present on failed operations.

        PackageManifestHeader:
            type: object
            description: General info about a package.
            properties:
                uuid:
                    type: string
                    format: uuid
                    description: UUID in this package's package descriptor.
                fileChecksum:
                    type: string
                    minLength: 64
                    maxLength: 64
                    description: SHA-256 checksum of the package file.
                    example: ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb
                repositoryAddress:
                    type: string
                    description: URL of the repository where the package is stored.
                    example: http://repo.tomlyn.protasis.moe/
                privatePackage:
                    type: boolean
                    description: Indicates if the package is private.
                    default: false
            required:
                - uuid
                - fileChecksum
                - repositoryAddress
        PackageManifestMetadata:
            type: object
            description: Metadata about a package such as name and author.
            required:
                - name
                - author
                - mapper
                - difficultyMin
                - difficultyMax
                - nsfw
            properties:
                name:
                    type: string
                    description: Full name of the package in its original language. This should be the same as the full name in the package descriptor.
                    example: "神聖かまってちゃん"
                romanizedName:
                    type: string
                    description: Romanized name of this package. Romanized names may only contain ASCII. If not provided, name will be used.
                    default: <name>
                    example: "shinsei kamatte chan"
                author:
                    type: string
                    description: The name of the author of the song used in this package, in its original language.
                    example: "23才の夏休み"
                authorRomanized:
                    type: string
                    description: Romanized name of the author. Romanized names may only contain ASCII. If not provided, author will be used.
                    default: <author>
                    example: "23 sai no natsuyasumi"
                mapper:
                    type: string
                    description: The name of the entity (individual, team, or organization) that produced the sheets in this package. This could be any name - does not have to be a legal name.
                    example: KuromeSama6
                tags:
                    type: array
                    items:
                        type: string
                        minLength: 0
                        maxLength: 10
                    description: Up to 10 tags for this package. Tags are strings and limited to 16 character max. Defaults to an empty array.
                    default: []
                    example:
                        - RockAndRoll
                        - Hard
                        - Japanese
                nsfw:
                    type: boolean
                    description: Whether ANY component of this package that is visible to game players (including but not limited to the audio track, cover image, or the background video) constutes NSFW content. See related policies in.
                    example: false

        PackageManifestSheets:
            type: object
            description: An object that stores data on sheets in this package.
            required:
                - sheets
            properties:
                sheets:
                    type: object
                    required:
                        - BSC
                        - LO
                        - HI
                        - OVR
                    properties:
                        BSC:
                            $ref: "#/components/schemas/SheetDescriptor"
                        LO:
                            $ref: "#/components/schemas/SheetDescriptor"
                        HI:
                            $ref: "#/components/schemas/SheetDescriptor"
                        OVR:
                            $ref: "#/components/schemas/SheetDescriptor"

        PackageManifest:
            type: object
            allOf:
                - required:
                      - id
                      - owner
                      - status
                - properties:
                      id:
                          $ref: "#/components/schemas/TomlynSnowflakeID"
                      owner:
                          $ref: "#/components/schemas/TomlynSnowflakeID"
                          description: The ID of the account who owns this package.

                      status:
                          type: string
                          enum:
                              - STANDBY
                              - UPLOADED
                              - UNDER_REVIEW
                              - PUBLISHED
                              - PARKED
                          description: The current status of this package.
                          example: STANDBY

                - $ref: "#/components/schemas/PackageManifestHeader"
                - $ref: "#/components/schemas/PackageManifestMetadata"
                - $ref: "#/components/schemas/PackageManifestSheets"

        SheetDescriptor:
            type: object
            description: Metadata about a sheet in a package.
            required:
                - constant
            properties:
                constant:
                    type: number
                    format: float
                    minimum: 1
                    maximum: 14
                    description: The chart constant of this sheet.
                    example: 12.9

        RepositoryInfo:
            type: object
            description: Information about a repository.
            required:
                - name
                - address
                - description
                - maintainer
                - email
                - squawk
                - protocol
                - version
            properties:
                name:
                    type: string
                    description: The name of the repository.
                    example: "Tomlyn Official Repository"
                address:
                    type: string
                    description: The official URL of the repository.
                    example: "http://repo.tomlyn.protasis.moe/"
                description:
                    type: string
                    description: A description of the repository. Rich text is supported.
                    example: |
                        The official repository for Tomlyn packages. This repository is hosted by the Tomlyn team and is only used to host official packages and events. If you wish to submit a package to this repository, please contact the Tomlyn team.
                maintainer:
                    type: string
                    description: The name of the maintainer (individual or team) of the repository.
                    example: KuromeSama6
                email:
                    type: string
                    description: Contact email for the repository. It may be an individual's email or a team email.
                    format: email
                    example: packagehosting@tomyln.protasis.moe
                contact:
                    type: string
                    description: Preferred contact method for the repository. This could be an email, a Discord username, or any other contact method. If not provided, email will be used.
                    default: <email>
                    example: KuromeSama6#1234
                squawk:
                    type: integer
                    description: |
                        A number that represents the repository's current status and may be used for verifications purposes or to communicate additional information. Use `0` for normal operation.

                        See "Squawk Codes" in the docs site for more information.
                    example: 7500
                private:
                    type: boolean
                    description: Whether this repository is private. Defaults to `false`.
                    default: false
                version:
                    type: string
                    description: An repository-defined version number for the repository. This could be a semantic version number or any other versioning scheme.
                    example: "1.0.0"
                protocol:
                    type: string
                    description: |
                        An arbitrary word or phrase representing the version of the repository protocol this repository is implementing. Central and clients will check this to make sure that a repository is implementing the latest repository protocol. Clients will refuse to download packages from a out-of-date repository.

                        Protocol version changes whenever there is a major change in repository protocol. The latest protocol version will be posted on the Tomlyn docs site as well as the developer portal. Make sure that you update your repository settings in time.
                    example: MATCHA BUFFET

    parameters:
        PackageIdParam:
            in: path
            name: package_id
            description: The globally unique Package ID that identifies this package.
            required: true
            schema:
                type: string
                minLength: 64
                maxLength: 64

    responses:
        StandardResponse:
            description: Standard response object for all API endpoints. This is what all responses from the Tomlyn central server will look like.
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            status:
                                type: integer
                                description: |
                                    The status code of this response:
                                    - `0`: Indicates a successful operation.
                                    - `1–9`: Represents internal server errors or invalid client requests (mapped to 5XX HTTP status codes).
                                    - `10–99`: Represents client errors (mapped to 4XX HTTP status codes).
                                    - `100–999`: Indicates additional warning messages, though the request was still successful. Rarely used.
                                    - `1000 and above`: Reserved for informational messages. The request was successful, but additional info is provided. Rarely used.

                                    Check the "API Status Codes" page in the Tomlyn docs for more details and specifics.
                            message:
                                type: string
                                description: A human-readable message that describes the result of the operation. This will be "ok" on most successful operations.

        UnauthorizedError:
            description: "`16` The request was not authorized. Either a JWT token was not provided or the provided token was invalid."
            content:
                application/json:
                    schema:
                        allOf:
                            - $ref: "#/components/schemas/StandardResponse"
                            - example:
                                  status: 16
                                  message: "permission denied"
                                  data: {}

    securitySchemes:
        TomlynAccountJWT:
            type: apiKey
            name: Authorization
            in: header
            description: JWT Token acquired via the login method.

        PackageRepoTokenJWT:
            type: apiKey
            name: X-Repo-Token
            in: header
            description: |
                *FOR REQUESTS TO REPOSITORIES ONLY*

                The **Repository Token** associated with this account and this package. A repository may choose to use this token to verify the identity of the requestor and the ownership of the package.

                This authentication method is optional - the repository can choose whether to honor this token or not. It is up to the repository to decide when this token is required as well as what resources this token can authorize access to.

                In addition, individual repository implementations may impose their own authentication methods, which may include passing in a token provided by that repository in the `Authorization` header.

externalDocs:
    description: See more on the official Tomlyn docs site.
    url: https://tomlyn-docs.protasis.moe/
